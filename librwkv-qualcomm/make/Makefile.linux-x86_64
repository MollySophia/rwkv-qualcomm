# define relevant directories
SRC_DIR := src
SRC_DIR_LOG := src/Log
SRC_DIR_PAL_LINUX := src/PAL/src/linux
SRC_DIR_PAL_COMMON := src/PAL/src/common
SRC_DIR_UTILS := src/Utils
SRC_DIR_WRAPPER_UTILS := src/WrapperUtils
QNN_API_INCLUDE := $(QNN_SDK_ROOT)/include/QNN
PAL_INCLUDE := src/PAL/include

# Checking if clang++ is present. If not switch to clang++
ifeq ($(shell $(CXX) -v 2>&1 | grep -c "clang version"), 0)
  CXX := clang++
endif

QNN_TARGET ?= x86_64-linux-clang
export TARGET_DIR := ./bin/$(QNN_TARGET)

librwkv-qualcomm := $(TARGET_DIR)/librwkv-qualcomm.a

# define target architecture if not previously defined, default is x86
ifndef TARGET_AARCH_VARS
TARGET_AARCH_VARS:= -march=x86-64
endif

.PHONY: librwkv-qualcomm_all
.DEFAULT: librwkv-qualcomm_all
librwkv-qualcomm_all: $(librwkv-qualcomm)

# Include paths
INCLUDES += -I$(SRC_DIR) -I$(SRC_DIR_LOG) -I$(SRC_DIR_UTILS) -I$(SRC_DIR_WRAPPER_UTILS) -I$(PAL_INCLUDE) -I$(QNN_API_INCLUDE)

# set compiler flags
# pthread is needed for AIC and HTP-MCP Backend
COMMON_CXXFLAGS = -std=c++20 -fno-rtti -fPIC -Wall -Werror -pg -pthread $(INCLUDES)
COMMON_LDFLAGS = -shared -s -fPIC -pthread

ifdef QNN_DEBUG_ENABLE
CXXFLAGS += $(COMMON_CXXFLAGS) -march=x86-64 -O0 -g -DQNN_API=""
LDFLAGS += $(COMMON_LDFLAGS)
else
CXXFLAGS += $(COMMON_CXXFLAGS) -march=x86-64 -O3 -Wno-write-strings -fvisibility=hidden -DQNN_API="__attribute__((visibility(\"default\")))"
LDFLAGS += $(COMMON_LDFLAGS) -fvisibility=hidden -flto
endif

# define library sources
SOURCES := $(wildcard $(SRC_DIR)/*.cpp)
SOURCES_LOG := $(wildcard $(SRC_DIR_LOG)/*.cpp)
SOURCES_PAL := $(wildcard $(SRC_DIR_PAL_LINUX)/*.cpp)
SOURCES_PAL += $(wildcard $(SRC_DIR_PAL_COMMON)/*.cpp)
SOURCES_UTILS := $(wildcard $(SRC_DIR_UTILS)/*.cpp)
SOURCES_WRAPPER_UTILS := $(wildcard $(SRC_DIR_WRAPPER_UTILS)/*.cpp)

# define object directory
OBJ_ROOT := obj
OBJ_DIR := obj/$(QNN_TARGET)
OBJ_DIR_LOG := obj/$(QNN_TARGET)/Log/
OBJ_DIR_PAL := obj/$(QNN_TARGET)/PAL
OBJ_DIR_UTILS := obj/$(QNN_TARGET)/Utils/
OBJ_DIR_WRAPPER_UTILS := obj/$(QNN_TARGET)/WrapperUtils/

# setup object files in object directory
OBJECTS := $(patsubst %.cpp,$(OBJ_DIR)/%.o,$(foreach x,$(SOURCES),$(notdir $(x))))
OBJECTS_LOG := $(patsubst %.cpp,$(OBJ_DIR_LOG)/%.o,$(foreach x,$(SOURCES_LOG),$(notdir $(x))))
OBJECTS_PAL := $(patsubst %.cpp,$(OBJ_DIR_PAL)/%.o,$(foreach x,$(SOURCES_PAL),$(notdir $(x))))
OBJECTS_UTILS := $(patsubst %.cpp,$(OBJ_DIR_UTILS)/%.o,$(foreach x,$(SOURCES_UTILS),$(notdir $(x))))
OBJECTS_WRAPPER_UTILS := $(patsubst %.cpp,$(OBJ_DIR_WRAPPER_UTILS)/%.o,$(foreach x,$(SOURCES_WRAPPER_UTILS),$(notdir $(x))))

#LIBS=-l/usr/lib/x86_64-linux-gnu/libflatbuffers.a
LIBS=-ldl

# Rule to make executable
.PHONY: librwkv-qualcomm
librwkv-qualcomm: $(librwkv-qualcomm)

# Implicit rule to compile and link object files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) -c $^ -o $@

$(OBJ_DIR_LOG)/%.o: $(SRC_DIR_LOG)/%.cpp
	$(CXX) $(CXXFLAGS) -c $^ -o $@

$(OBJ_DIR_PAL)/%.o: $(SRC_DIR_PAL_LINUX)/%.cpp
	$(CXX) $(CXXFLAGS) -c $^ -o $@

$(OBJ_DIR_PAL)/%.o: $(SRC_DIR_PAL_COMMON)/%.cpp
	$(CXX) $(CXXFLAGS) -c $^ -o $@

$(OBJ_DIR_UTILS)/%.o: $(SRC_DIR_UTILS)/%.cpp
	$(CXX) $(CXXFLAGS) -c $^ -o $@

$(OBJ_DIR_WRAPPER_UTILS)/%.o: $(SRC_DIR_WRAPPER_UTILS)/%.cpp
	$(CXX) $(CXXFLAGS) -c $^ -o $@

# set up resources
directories := $(TARGET_DIR) $(OBJ_DIR) $(OBJ_DIR_LOG) $(OBJ_DIR_PAL) $(OBJ_DIR_UTILS) $(OBJ_DIR_WRAPPER_UTILS)

# Compile
$(librwkv-qualcomm): $(OBJECTS) $(OBJECTS_LOG) $(OBJECTS_PAL) $(OBJECTS_UTILS) $(OBJECTS_WRAPPER_UTILS) | $(directories)
	$(CXX) $(CXXFLAGS) $(LINKFLAGS) -o $@ $^ $(LIBS)

$(librwkv-qualcomm): $(OBJECTS) $(OBJECTS_LOG) $(OBJECTS_PAL) $(OBJECTS_UTILS) $(OBJECTS_WRAPPER_UTILS) | $(directories)
	ar cr $@ $(LIBS)

# rule for object directory resource
$(OBJECTS): | $(OBJ_DIR)
$(OBJECTS_LOG): | $(OBJ_DIR_LOG)
$(OBJECTS_PAL): | $(OBJ_DIR_PAL)
$(OBJECTS_UTILS): | $(OBJ_DIR_UTILS)
$(OBJECTS_WRAPPER_UTILS): | $(OBJ_DIR_WRAPPER_UTILS)

# rule to create directories
$(directories):
	mkdir -p $@

.PHONY: clean
clean:
	rm -rf $(OBJ_ROOT) $(TARGET_DIR)
